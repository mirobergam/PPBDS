# Summer

How can we ensure that a PR does not "break" the chapter for which it is submitted? For example, the last PR for chapter 7 broke it. But there was no "easy" way for me to predict that ahead of time, other than trying to knit the chapter myself. Instead, a PR should do something --- via Github Actions? --- which would allow both the submitter and me to see that, at the very least, the chapter builds on its own without an error.

Mak test

## TODO

0) **usethis** Notes: `pr_pull_upstream()` will be deprecated in 2.0.0 (I'm currently on 1.6.1.9001 and it no longer works). The new function to pull from master makes much more sense:
  + `pr_merge_main()` will pull all files from the master (davidkane9/PPBDS) instead of your own master (itsyaoyu/PPBDS). For example: I was unable to pull the new shopping week files before updating.
  + `pr_push()` also appears to be fixed - it no longer directs you to an already closed request. Now, it directs you to the comparing changes page.

1) How to set digits for the whole book? How do people safely change it and revert? Use common.R and set it there. Individual chapters can change, go back, whatever. But that won't effect the next chapter. Right?
  + Correct, created common.R and usage is `source("common.R")` to the beginning of each chapter.

2) Network with Desiree. https://desiree.rbind.io/post/2020/learnr-iframes/ Introduction to RStudio people. Maybe relevant:
  + Need to push this back a week, busy week at internship.

https://education.rstudio.com/blog/2020/07/learning-learnr/
https://rmarkdown.rstudio.com/authoring_shiny_prerendered.HTML

3) Get simpsons-paradox.Rmd and m-s-errors.Rmd to work. Animations don't appear as they should. Talk wioth Rob McKenzie and Maria Burzhila?
  + Animations do work. You have to click on the slides first and then use the left and right arrow keys to move between slides. The arrow keys don't work if you don't click/select the slides first.
  + I don't belive the mouse click moves the slides even when you knit them individually. You have to use the arrow keys or space bar.

4) How do we get it to fail noisily if one chapter fails? `knitr::include_graphics()` does not seem to produce an error when we build the book. How do we do automated testing?
  + From my limited testing, when a png filename was spelled incorrectly in `include_graphics()`, the book failed to build. However, I'm also unable to test this fully on the fork.

5) Think about the bib/ directory. We need to fix our citations. Automate the citation of whatever packages we are using. The references are a mess, put together from 3 different original sources. First, there a bib directory, with three files in it. Second, within index.Rmd there was a call to knitr::write_bib, which is a famously dangerous and confusing function. I guess that this creates packages.bib. (I have since deleted this.) Third, there is the links.md file, which is supposed to replace a lot of the references like @R-readr, mainly in chapter 2. That seems not to work at all. Come up with a plan to deal with all these. Deal with bibliography. Our source books use very different approaches. write_bib() is infamous for making trouble. I like the way that MD writes out new versions of citations associated with R packages that have been updated. Seems like all chapters generate references at the end. That is fine, but it should be standardized. Or do all those references belong at the end?
  + Best way to go about this might be to have students keep track of a .bib file for each chapter (like in 1006 for each project). We can then refer to all these in the index.Rmd file bibliography option.

6) How should we format code chunks? The code in many current code chunks is "cut off," meaning that it does not appear in the output files. See examples in chapter 5. The hack solution is to format the code so that, instead of being 80 (or whatever) characters across, it is only 50, or whatever we currently allow for. I don't like that since the code looks weird and ugly. Another solution is to allow (some) code chunks to extend into the margin. (You can see that Healy does that, at least for some code output boxes. Another solution is to make the font in code chunks smaller. I suspect that this last one is best. We need to pick a font so that 80 characters appear, or at least more than our currently shown. Would also be nice to provide authors with an easy way of knowing when they have written to wide.
  + Fixed in css and also fixed other table outputs that were not aligned correctly.

## Book Building

* [*Bookdown*](https://bookdown.org/yihui/bookdown/) is the key reference. Note that you need to uncomment the `html:` in _bookdown.yml in order for thus build command to work (This means selecting the order of Rmd files to knit). We usually build the book by pressing the "Build Book" button under the Build panel.

* We are using the Stanford example.
  + Make sure the **msmbstyle** package is installed
  + `msmbstyle::msmb_html_book` in the _output.yml file outputs to the Stanford format
  + To set the book color to crimson:
    + go to docs/libs/msmb-css-0/msmb.css
    + Find `#1881c2` and replace all with `#c90016`
    + Find `24,129,194` and replce with `201,0,23`
    + Save the file. No need to rebuild the book.

* We deploy to Netifly. This assumes you have a Netifly account already.
  + Follow instructions [here](https://cerebralmastication.com/2019/05/11/publishing-bookdown-to-netlify-automagically/)

* For structure, we decided to have a single _output.yml file, which each chapter must include as so:
---
output_yaml:
  - _output.yml
---



## Open Questions

* `knitr::include_graphics()` does not seem to produce an error when we build the book, even if the file is missing. How can we make sure it does error? And what should our standard use of this tool look like? One approach: [Using Images in Figures](http://zevross.com/blog/2017/06/19/tips-and-tricks-for-working-with-images-and-figures-in-r-markdown-documents/).


* How best to use cache=TRUE? Perhaps arrange for all chapters to have a centralized cache directory which would, obviously, be .gitignored? It is a hack to save the gifs from chapters like animation rather than to create them afresh.

* How can we make the book build faster? Maybe we should use cache=TRUE for the slow chunks. But which chunks are those?

* How do we print it? I like the PDF version of Rafa's [book](https://leanpub.com/datasciencebook) available from Lean Pub. How hard is that to make?

* Is there a way to print out messages during the book building process so that you know where the process is? Recall that we can't (?) use R code chunk names because duplicate code chunk names cause (still?) the process to blow up.

* Consider using notes: https://desiree.rbind.io/post/2019/making-tip-boxes-with-bookdown-and-rmarkdown/

* Think about packages. Note that the [545 book](https://github.com/rstudio-education/stat545) uses a fairly sophisticated plan, involving the new **renv** package.

* Can you rebuild just a single chapter and then commit/push it? Right now, I have to rebuild the whole thing each time I want to make a single change. Takes too long.

* How do we centralize the loading of packages? What is our plan for loading libraries and removing them when they are no longer need? Chapter 11 contained an annoying bug: rvest and purrr both have pluck() as a function. Need to ensure that you get the purrr version if you need it. Bug only showed up when Chapter 5 (with rvest loaded) was used in the build. Organize packages. What are all the packages we need? How do we ensure that we cite them all, as we should? Where do we load them? Again, there must be best practices for stuff like this. Only use high quality packages, and recommend the same to readers. When are different packages introduced? Where is this written down? Need to be intentional about what we introduced outside of the tidyverse --- janitor, ggthemes, reprex, fs, skimr, gt, googlesheets4, infer, gtsummary --- and when we do it. One annoyance is that new contributors have to try to compile the book a dozen times before it will work because there is no way to know, ahead of time, which packages are required. Make the book an R package?

* Consider the use of before_chapter_script: "_common.R" in the DS _bookdown.yml as well as the associated _common.R file. Is this an approach we should copy? The lack of this why I can't get all the DS chapters to work. Combine _common.R, common.R and index.Rmd information into one place. Need to figure out how this works in bookdown. I think we need one file which only runs once when you make the book. That files does a bunch of stuff involving copying over files. But you don't maintain state after running that file, so any new functions are lost. Then you have a second file, like _common.R, which is run at the start of compiling each chapter.

* The book has lots of references, especially to other chapters. Many of these don't work because the referred-to chapters don't exist. We need a thorough clean up.


## Other Items


The world confronts us. We must make decisions. The data we want is missing. So, we create models, make estimates, admit to our uncertainty, and then decide.

## Unclassified Items

* Fix "No additional resources" in Chapter 6 and 7. Standardize this section across all chapters. 545 is different. Delete everywhere?

* Take (?) material from: https://chabefer.github.io/STCI/; https://github.com/chabefer/SKY

* Some chapters, like productivity.Rmd have a lot of footnotes. Good or bad?

* Revisit the Prediction Game.


````markdown
`r ''````{r}
plot(cars)
```
````

### From the Bookdown book

preview_chapter() and serve_book() as aid to chapter writers.

webshot() tool for including images taken from webpages. Everytime we mention how cool source X is, we should provide a webshot of it. (And we should test that it exists.) Make the productivity chapter include way less of our prose.

switch to tufte() style, ask Healy. Or this guy: http://nickchk.com/chapter5.pdf

Kindle book

put the book on bookdown.org, or class assignments


Key concepts which need to be put everywhere:

decisions need models
potential outcomes and causal effects
units, treatments, outcomes
randomization is magic: assignment to estimate causal effects, bootstrap to estimate uncertainty

Describe, predict, infer. Description of things you can see, prediction for things you will see and inference about things you will never see.

Prediction checks.

Bias/Variance == Underfitting/Overfitting

Drop all the frequentist nonsense except for a footnote at the first use with a confidence interval and an appendix which walks students through the Kuske arguments.


Discuss RCM, assuming that we are estimating a causal effect of some type. And, if we are not estimating causal effects (i.e., all we care about is prediction), then the mechanics of lm are the same, but the interpretation of the regression coefficient has no causal implications.  We want a series of tables illustrating potential outcomes and our estmation of them. Start with a table with ?, just as in the Appendix. We use linear regression to fill in these questions marks. Show table with question marks and then show table with question marks filled in with best guess. Then show table with question marks filled in with a confidence interval for the mean and then for a distribution of predicted values. The closer we can tie RCM to the different parts of a regression, the better. But do this each chapter, not just regression.



Each chapter should finish with a new section which uses list-columns plus broom to estimate scores of models, and then pull out interesting models. See the gapminder examples from https://r4ds.had.co.nz/many-models.html#gapminder. We need the full tool set: nest, unnest and so on.

Each chapter begins with a real example, a decision we must make (if only the prediction game), and then creates a model which we will use to help us. Bets are always offered. RCM discussed. Bias scenarios demonstrated. The secret weapon --- a model for each state or each year --- used.


## Other summer issues


https://committedtotape.shinyapps.io/freeR/


Replace all photos of activities with photos from Harvard, using Tsai.

Chapters 7, 8 and 9

## Approaches to Include?

xgboost: https://www.r-bloggers.com/using-xgboost-with-tidymodels/

I really like the Kruchke and brms combination: https://bookdown.org/content/3686/

https://bookdown.org/content/3686/


### Use of Note Boxes

https://desiree.rbind.io/post/2019/making-tip-boxes-with-bookdown-and-rmarkdown/


http://statprep.org/

## Other Topics


missing data
regresssion towards the mean
prediction/classification
map/network/text

"docknitr: Use Docker Images to Process Rmarkdown Blocks" looks promising. Note the vignettes. But maybe this is a) overkill and b) only really useful for Python, which is what is used for the docknitr vignette examples. The methods used by STAT 545 and Modern Dive are probably good enough.


# Notes on **bookdown** Book

p. 64 notes that adding the suffix 2 to various output formats gives you all the cool stuff, like figure captioning and numbering.

p. 74 has a useful discussion of configuration options for the _bookdown.yml file.

* rmd_subdir are subdirectories to search for source Rmd files. That seems critical for my submodule structure.

* output_dir is the output directory of the process (_book by default).

* clean is vector of files and directories to be cleaned by the clean_book() function.

pp. 5-6 discuss rmd_files as the way to define your own ordering for output files. This also goes in the _bookdown.yml file.

Probably worth going through the book again in January.


# Appendices

Appendices have information that either a) a prof might reasonably decide not to assign or b) often contain material that students already know.

* Why Bayes?

* Messed up research articles. We need to prepare case studies of messed up articles. Start with those that Gelman cites. The tricky part is trying to figure out how to include these in class. And during which week do we use them.

* Cartoons like [xkcd](https://cran.r-project.org/package=RXKCD)? Others? We should have lots of these, either in an appendix or as margin notes.

* Videos like [here](https://bookdown.org/yihui/rmarkdown/learnr-videos.html). Use knitr::include_url with embed/id? It is an on-line book, so space is no object! Start by collecting the best work in an appendix.

* All the math you don't need to know. Bayes Theorem. Formulas. Normal distribution. Central limit theorem

* How to Make Tables using gt package, other stuff?

https://themockup.blog/posts/2020-05-16-gt-a-grammer-of-tables/

* List of cool packages, googlesheet4 examples. : https://datavizm20.classes.andrewheiss.com/example/10-example/

* Cool Graphics Things -- ggplotly

* How to make an Rpubs and gists and saveWidgets:
https://datavizm20.classes.andrewheiss.com/example/10-example/

* Tufte and other graphics luminaries

* Leamer and other famous articles

* rtweet (Cassidy)

* Making memes. Someone should figure out which meme maker is best for R. Or maybe we make our own. And then we make lots of memes for the book!

* Map appendix should include some Matt Blackwell examples.

* Entry about best class.


